// Generated by gencpp from file cuda_amcl/vegvisir_msg.msg
// DO NOT EDIT!


#ifndef CUDA_AMCL_MESSAGE_VEGVISIR_MSG_H
#define CUDA_AMCL_MESSAGE_VEGVISIR_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/PoseWithCovarianceStamped.h>
#include <geometry_msgs/Point.h>

namespace cuda_amcl
{
template <class ContainerAllocator>
struct vegvisir_msg_
{
  typedef vegvisir_msg_<ContainerAllocator> Type;

  vegvisir_msg_()
    : amcl_pose()
    , odom_cal()  {
    }
  vegvisir_msg_(const ContainerAllocator& _alloc)
    : amcl_pose(_alloc)
    , odom_cal(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::PoseWithCovarianceStamped_<ContainerAllocator>  _amcl_pose_type;
  _amcl_pose_type amcl_pose;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _odom_cal_type;
  _odom_cal_type odom_cal;





  typedef boost::shared_ptr< ::cuda_amcl::vegvisir_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cuda_amcl::vegvisir_msg_<ContainerAllocator> const> ConstPtr;

}; // struct vegvisir_msg_

typedef ::cuda_amcl::vegvisir_msg_<std::allocator<void> > vegvisir_msg;

typedef boost::shared_ptr< ::cuda_amcl::vegvisir_msg > vegvisir_msgPtr;
typedef boost::shared_ptr< ::cuda_amcl::vegvisir_msg const> vegvisir_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cuda_amcl::vegvisir_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cuda_amcl::vegvisir_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cuda_amcl::vegvisir_msg_<ContainerAllocator1> & lhs, const ::cuda_amcl::vegvisir_msg_<ContainerAllocator2> & rhs)
{
  return lhs.amcl_pose == rhs.amcl_pose &&
    lhs.odom_cal == rhs.odom_cal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cuda_amcl::vegvisir_msg_<ContainerAllocator1> & lhs, const ::cuda_amcl::vegvisir_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cuda_amcl

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::cuda_amcl::vegvisir_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cuda_amcl::vegvisir_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cuda_amcl::vegvisir_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cuda_amcl::vegvisir_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cuda_amcl::vegvisir_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cuda_amcl::vegvisir_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cuda_amcl::vegvisir_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3333a8a596f79d0f0cc6ec9e2ca893e1";
  }

  static const char* value(const ::cuda_amcl::vegvisir_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3333a8a596f79d0fULL;
  static const uint64_t static_value2 = 0x0cc6ec9e2ca893e1ULL;
};

template<class ContainerAllocator>
struct DataType< ::cuda_amcl::vegvisir_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cuda_amcl/vegvisir_msg";
  }

  static const char* value(const ::cuda_amcl::vegvisir_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cuda_amcl::vegvisir_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/PoseWithCovarianceStamped amcl_pose\n"
"geometry_msgs/Point odom_cal\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovarianceStamped\n"
"# This expresses an estimated pose with a reference coordinate frame and timestamp\n"
"\n"
"Header header\n"
"PoseWithCovariance pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovariance\n"
"# This represents a pose in free space with uncertainty.\n"
"\n"
"Pose pose\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::cuda_amcl::vegvisir_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cuda_amcl::vegvisir_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.amcl_pose);
      stream.next(m.odom_cal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct vegvisir_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cuda_amcl::vegvisir_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cuda_amcl::vegvisir_msg_<ContainerAllocator>& v)
  {
    s << indent << "amcl_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseWithCovarianceStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.amcl_pose);
    s << indent << "odom_cal: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.odom_cal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUDA_AMCL_MESSAGE_VEGVISIR_MSG_H

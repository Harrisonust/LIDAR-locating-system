//#line 2 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"
// *********************************************************
//
// File autogenerated for the quickmcl package
// by the dynamic_reconfigure package.
// Please do not edit.
//
// ********************************************************/

#ifndef __quickmcl__QUICKMCLCONFIG_H__
#define __quickmcl__QUICKMCLCONFIG_H__

#if __cplusplus >= 201103L
#define DYNAMIC_RECONFIGURE_FINAL final
#else
#define DYNAMIC_RECONFIGURE_FINAL
#endif

#include <dynamic_reconfigure/config_tools.h>
#include <limits>
#include <ros/node_handle.h>
#include <dynamic_reconfigure/ConfigDescription.h>
#include <dynamic_reconfigure/ParamDescription.h>
#include <dynamic_reconfigure/Group.h>
#include <dynamic_reconfigure/config_init_mutex.h>
#include <boost/any.hpp>

namespace quickmcl
{
  class QuickMCLConfigStatics;

  class QuickMCLConfig
  {
  public:
    class AbstractParamDescription : public dynamic_reconfigure::ParamDescription
    {
    public:
      AbstractParamDescription(std::string n, std::string t, uint32_t l,
          std::string d, std::string e)
      {
        name = n;
        type = t;
        level = l;
        description = d;
        edit_method = e;
      }

      virtual void clamp(QuickMCLConfig &config, const QuickMCLConfig &max, const QuickMCLConfig &min) const = 0;
      virtual void calcLevel(uint32_t &level, const QuickMCLConfig &config1, const QuickMCLConfig &config2) const = 0;
      virtual void fromServer(const ros::NodeHandle &nh, QuickMCLConfig &config) const = 0;
      virtual void toServer(const ros::NodeHandle &nh, const QuickMCLConfig &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, QuickMCLConfig &config) const = 0;
      virtual void toMessage(dynamic_reconfigure::Config &msg, const QuickMCLConfig &config) const = 0;
      virtual void getValue(const QuickMCLConfig &config, boost::any &val) const = 0;
    };

    typedef boost::shared_ptr<AbstractParamDescription> AbstractParamDescriptionPtr;
    typedef boost::shared_ptr<const AbstractParamDescription> AbstractParamDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template <class T>
    class ParamDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractParamDescription
    {
    public:
      ParamDescription(std::string a_name, std::string a_type, uint32_t a_level,
          std::string a_description, std::string a_edit_method, T QuickMCLConfig::* a_f) :
        AbstractParamDescription(a_name, a_type, a_level, a_description, a_edit_method),
        field(a_f)
      {}

      T QuickMCLConfig::* field;

      virtual void clamp(QuickMCLConfig &config, const QuickMCLConfig &max, const QuickMCLConfig &min) const
      {
        if (config.*field > max.*field)
          config.*field = max.*field;

        if (config.*field < min.*field)
          config.*field = min.*field;
      }

      virtual void calcLevel(uint32_t &comb_level, const QuickMCLConfig &config1, const QuickMCLConfig &config2) const
      {
        if (config1.*field != config2.*field)
          comb_level |= level;
      }

      virtual void fromServer(const ros::NodeHandle &nh, QuickMCLConfig &config) const
      {
        nh.getParam(name, config.*field);
      }

      virtual void toServer(const ros::NodeHandle &nh, const QuickMCLConfig &config) const
      {
        nh.setParam(name, config.*field);
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, QuickMCLConfig &config) const
      {
        return dynamic_reconfigure::ConfigTools::getParameter(msg, name, config.*field);
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const QuickMCLConfig &config) const
      {
        dynamic_reconfigure::ConfigTools::appendParameter(msg, name, config.*field);
      }

      virtual void getValue(const QuickMCLConfig &config, boost::any &val) const
      {
        val = config.*field;
      }
    };

    class AbstractGroupDescription : public dynamic_reconfigure::Group
    {
      public:
      AbstractGroupDescription(std::string n, std::string t, int p, int i, bool s)
      {
        name = n;
        type = t;
        parent = p;
        state = s;
        id = i;
      }

      std::vector<AbstractParamDescriptionConstPtr> abstract_parameters;
      bool state;

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &config) const = 0;
      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &config) const =0;
      virtual void updateParams(boost::any &cfg, QuickMCLConfig &top) const= 0;
      virtual void setInitialState(boost::any &cfg) const = 0;


      void convertParams()
      {
        for(std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = abstract_parameters.begin(); i != abstract_parameters.end(); ++i)
        {
          parameters.push_back(dynamic_reconfigure::ParamDescription(**i));
        }
      }
    };

    typedef boost::shared_ptr<AbstractGroupDescription> AbstractGroupDescriptionPtr;
    typedef boost::shared_ptr<const AbstractGroupDescription> AbstractGroupDescriptionConstPtr;

    // Final keyword added to class because it has virtual methods and inherits
    // from a class with a non-virtual destructor.
    template<class T, class PT>
    class GroupDescription DYNAMIC_RECONFIGURE_FINAL : public AbstractGroupDescription
    {
    public:
      GroupDescription(std::string a_name, std::string a_type, int a_parent, int a_id, bool a_s, T PT::* a_f) : AbstractGroupDescription(a_name, a_type, a_parent, a_id, a_s), field(a_f)
      {
      }

      GroupDescription(const GroupDescription<T, PT>& g): AbstractGroupDescription(g.name, g.type, g.parent, g.id, g.state), field(g.field), groups(g.groups)
      {
        parameters = g.parameters;
        abstract_parameters = g.abstract_parameters;
      }

      virtual bool fromMessage(const dynamic_reconfigure::Config &msg, boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        if(!dynamic_reconfigure::ConfigTools::getGroupState(msg, name, (*config).*field))
          return false;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          if(!(*i)->fromMessage(msg, n))
            return false;
        }

        return true;
      }

      virtual void setInitialState(boost::any &cfg) const
      {
        PT* config = boost::any_cast<PT*>(cfg);
        T* group = &((*config).*field);
        group->state = state;

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = boost::any(&((*config).*field));
          (*i)->setInitialState(n);
        }

      }

      virtual void updateParams(boost::any &cfg, QuickMCLConfig &top) const
      {
        PT* config = boost::any_cast<PT*>(cfg);

        T* f = &((*config).*field);
        f->setParams(top, abstract_parameters);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          boost::any n = &((*config).*field);
          (*i)->updateParams(n, top);
        }
      }

      virtual void toMessage(dynamic_reconfigure::Config &msg, const boost::any &cfg) const
      {
        const PT config = boost::any_cast<PT>(cfg);
        dynamic_reconfigure::ConfigTools::appendGroup<T>(msg, name, id, parent, config.*field);

        for(std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = groups.begin(); i != groups.end(); ++i)
        {
          (*i)->toMessage(msg, config.*field);
        }
      }

      T PT::* field;
      std::vector<QuickMCLConfig::AbstractGroupDescriptionConstPtr> groups;
    };

class DEFAULT
{
  public:
    DEFAULT()
    {
      state = true;
      name = "Default";
    }

    void setParams(QuickMCLConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);


      }
    }

    

    bool state;
    std::string name;

    class MOTION_MODEL
{
  public:
    MOTION_MODEL()
    {
      state = true;
      name = "motion_model";
    }

    void setParams(QuickMCLConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("motion_model_alpha_1"==(*_i)->name){motion_model_alpha_1 = boost::any_cast<double>(val);}
        if("motion_model_alpha_2"==(*_i)->name){motion_model_alpha_2 = boost::any_cast<double>(val);}
        if("motion_model_alpha_3"==(*_i)->name){motion_model_alpha_3 = boost::any_cast<double>(val);}
        if("motion_model_alpha_4"==(*_i)->name){motion_model_alpha_4 = boost::any_cast<double>(val);}
        if("motion_model_min_trans"==(*_i)->name){motion_model_min_trans = boost::any_cast<double>(val);}
        if("motion_model_min_rot"==(*_i)->name){motion_model_min_rot = boost::any_cast<double>(val);}
      }
    }

    double motion_model_alpha_1;
double motion_model_alpha_2;
double motion_model_alpha_3;
double motion_model_alpha_4;
double motion_model_min_trans;
double motion_model_min_rot;

    bool state;
    std::string name;

    
}motion_model;

class SENSOR_MODEL
{
  public:
    SENSOR_MODEL()
    {
      state = true;
      name = "sensor_model";
    }

    void setParams(QuickMCLConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("likelihood_z_hit"==(*_i)->name){likelihood_z_hit = boost::any_cast<double>(val);}
        if("likelihood_z_rand"==(*_i)->name){likelihood_z_rand = boost::any_cast<double>(val);}
        if("likelihood_num_beams"==(*_i)->name){likelihood_num_beams = boost::any_cast<int>(val);}
        if("likelihood_max_laser_distance"==(*_i)->name){likelihood_max_laser_distance = boost::any_cast<double>(val);}
      }
    }

    double likelihood_z_hit;
double likelihood_z_rand;
int likelihood_num_beams;
double likelihood_max_laser_distance;

    bool state;
    std::string name;

    
}sensor_model;

class PARTICLE_FILTER
{
  public:
    PARTICLE_FILTER()
    {
      state = true;
      name = "particle_filter";
    }

    void setParams(QuickMCLConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("particle_filter_particle_count_min"==(*_i)->name){particle_filter_particle_count_min = boost::any_cast<int>(val);}
        if("particle_filter_particle_count_max"==(*_i)->name){particle_filter_particle_count_max = boost::any_cast<int>(val);}
        if("particle_filter_resample_count"==(*_i)->name){particle_filter_resample_count = boost::any_cast<int>(val);}
        if("particle_filter_alpha_fast"==(*_i)->name){particle_filter_alpha_fast = boost::any_cast<double>(val);}
        if("particle_filter_alpha_slow"==(*_i)->name){particle_filter_alpha_slow = boost::any_cast<double>(val);}
        if("particle_filter_kld_epsilon"==(*_i)->name){particle_filter_kld_epsilon = boost::any_cast<double>(val);}
        if("particle_filter_kld_z"==(*_i)->name){particle_filter_kld_z = boost::any_cast<double>(val);}
        if("space_partitioning_resolution_xy"==(*_i)->name){space_partitioning_resolution_xy = boost::any_cast<double>(val);}
        if("space_partitioning_resolution_theta"==(*_i)->name){space_partitioning_resolution_theta = boost::any_cast<double>(val);}
        if("particle_filter_resample_type"==(*_i)->name){particle_filter_resample_type = boost::any_cast<std::string>(val);}
      }
    }

    int particle_filter_particle_count_min;
int particle_filter_particle_count_max;
int particle_filter_resample_count;
double particle_filter_alpha_fast;
double particle_filter_alpha_slow;
double particle_filter_kld_epsilon;
double particle_filter_kld_z;
double space_partitioning_resolution_xy;
double space_partitioning_resolution_theta;
std::string particle_filter_resample_type;

    bool state;
    std::string name;

    
}particle_filter;

class ROS
{
  public:
    ROS()
    {
      state = true;
      name = "ros";
    }

    void setParams(QuickMCLConfig &config, const std::vector<AbstractParamDescriptionConstPtr> params)
    {
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator _i = params.begin(); _i != params.end(); ++_i)
      {
        boost::any val;
        (*_i)->getValue(config, val);

        if("fixed_frame"==(*_i)->name){fixed_frame = boost::any_cast<std::string>(val);}
        if("localised_frame"==(*_i)->name){localised_frame = boost::any_cast<std::string>(val);}
        if("odom_frame"==(*_i)->name){odom_frame = boost::any_cast<std::string>(val);}
        if("save_pose_period"==(*_i)->name){save_pose_period = boost::any_cast<double>(val);}
        if("post_date_transform"==(*_i)->name){post_date_transform = boost::any_cast<double>(val);}
        if("publish_particles"==(*_i)->name){publish_particles = boost::any_cast<bool>(val);}
      }
    }

    std::string fixed_frame;
std::string localised_frame;
std::string odom_frame;
double save_pose_period;
double post_date_transform;
bool publish_particles;

    bool state;
    std::string name;

    
}ros;

}groups;



//#line 25 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      double motion_model_alpha_1;
//#line 26 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      double motion_model_alpha_2;
//#line 27 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      double motion_model_alpha_3;
//#line 28 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      double motion_model_alpha_4;
//#line 29 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      double motion_model_min_trans;
//#line 30 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      double motion_model_min_rot;
//#line 35 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      double likelihood_z_hit;
//#line 38 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      double likelihood_z_rand;
//#line 49 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      int likelihood_num_beams;
//#line 52 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      double likelihood_max_laser_distance;
//#line 55 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      int particle_filter_particle_count_min;
//#line 56 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      int particle_filter_particle_count_max;
//#line 57 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      int particle_filter_resample_count;
//#line 58 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      double particle_filter_alpha_fast;
//#line 59 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      double particle_filter_alpha_slow;
//#line 60 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      double particle_filter_kld_epsilon;
//#line 61 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      double particle_filter_kld_z;
//#line 62 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      double space_partitioning_resolution_xy;
//#line 64 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      double space_partitioning_resolution_theta;
//#line 65 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      std::string particle_filter_resample_type;
//#line 68 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      std::string fixed_frame;
//#line 69 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      std::string localised_frame;
//#line 70 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      std::string odom_frame;
//#line 75 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      double save_pose_period;
//#line 79 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      double post_date_transform;
//#line 82 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      bool publish_particles;
//#line 228 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

    bool __fromMessage__(dynamic_reconfigure::Config &msg)
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();

      int count = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        if ((*i)->fromMessage(msg, *this))
          count++;

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i ++)
      {
        if ((*i)->id == 0)
        {
          boost::any n = boost::any(this);
          (*i)->updateParams(n, *this);
          (*i)->fromMessage(msg, n);
        }
      }

      if (count != dynamic_reconfigure::ConfigTools::size(msg))
      {
        ROS_ERROR("QuickMCLConfig::__fromMessage__ called with an unexpected parameter.");
        ROS_ERROR("Booleans:");
        for (unsigned int i = 0; i < msg.bools.size(); i++)
          ROS_ERROR("  %s", msg.bools[i].name.c_str());
        ROS_ERROR("Integers:");
        for (unsigned int i = 0; i < msg.ints.size(); i++)
          ROS_ERROR("  %s", msg.ints[i].name.c_str());
        ROS_ERROR("Doubles:");
        for (unsigned int i = 0; i < msg.doubles.size(); i++)
          ROS_ERROR("  %s", msg.doubles[i].name.c_str());
        ROS_ERROR("Strings:");
        for (unsigned int i = 0; i < msg.strs.size(); i++)
          ROS_ERROR("  %s", msg.strs[i].name.c_str());
        // @todo Check that there are no duplicates. Make this error more
        // explicit.
        return false;
      }
      return true;
    }

    // This version of __toMessage__ is used during initialization of
    // statics when __getParamDescriptions__ can't be called yet.
    void __toMessage__(dynamic_reconfigure::Config &msg, const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__, const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__) const
    {
      dynamic_reconfigure::ConfigTools::clear(msg);
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toMessage(msg, *this);

      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        if((*i)->id == 0)
        {
          (*i)->toMessage(msg, *this);
        }
      }
    }

    void __toMessage__(dynamic_reconfigure::Config &msg) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      __toMessage__(msg, __param_descriptions__, __group_descriptions__);
    }

    void __toServer__(const ros::NodeHandle &nh) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->toServer(nh, *this);
    }

    void __fromServer__(const ros::NodeHandle &nh)
    {
      static bool setup=false;

      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->fromServer(nh, *this);

      const std::vector<AbstractGroupDescriptionConstPtr> &__group_descriptions__ = __getGroupDescriptions__();
      for (std::vector<AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); i++){
        if (!setup && (*i)->id == 0) {
          setup = true;
          boost::any n = boost::any(this);
          (*i)->setInitialState(n);
        }
      }
    }

    void __clamp__()
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      const QuickMCLConfig &__max__ = __getMax__();
      const QuickMCLConfig &__min__ = __getMin__();
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->clamp(*this, __max__, __min__);
    }

    uint32_t __level__(const QuickMCLConfig &config) const
    {
      const std::vector<AbstractParamDescriptionConstPtr> &__param_descriptions__ = __getParamDescriptions__();
      uint32_t level = 0;
      for (std::vector<AbstractParamDescriptionConstPtr>::const_iterator i = __param_descriptions__.begin(); i != __param_descriptions__.end(); ++i)
        (*i)->calcLevel(level, config, *this);
      return level;
    }

    static const dynamic_reconfigure::ConfigDescription &__getDescriptionMessage__();
    static const QuickMCLConfig &__getDefault__();
    static const QuickMCLConfig &__getMax__();
    static const QuickMCLConfig &__getMin__();
    static const std::vector<AbstractParamDescriptionConstPtr> &__getParamDescriptions__();
    static const std::vector<AbstractGroupDescriptionConstPtr> &__getGroupDescriptions__();

  private:
    static const QuickMCLConfigStatics *__get_statics__();
  };

  template <> // Max and min are ignored for strings.
  inline void QuickMCLConfig::ParamDescription<std::string>::clamp(QuickMCLConfig &config, const QuickMCLConfig &max, const QuickMCLConfig &min) const
  {
    (void) config;
    (void) min;
    (void) max;
    return;
  }

  class QuickMCLConfigStatics
  {
    friend class QuickMCLConfig;

    QuickMCLConfigStatics()
    {
QuickMCLConfig::GroupDescription<QuickMCLConfig::DEFAULT, QuickMCLConfig> Default("Default", "", 0, 0, true, &QuickMCLConfig::groups);
QuickMCLConfig::GroupDescription<QuickMCLConfig::DEFAULT::MOTION_MODEL, QuickMCLConfig::DEFAULT> motion_model("motion_model", "", 0, 1, true, &QuickMCLConfig::DEFAULT::motion_model);
//#line 25 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __min__.motion_model_alpha_1 = 0.0;
//#line 25 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __max__.motion_model_alpha_1 = std::numeric_limits<double>::infinity();
//#line 25 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __default__.motion_model_alpha_1 = 0.05;
//#line 25 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      motion_model.abstract_parameters.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<double>("motion_model_alpha_1", "double", 1, "Rotation noise from rotation", "", &QuickMCLConfig::motion_model_alpha_1)));
//#line 25 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __param_descriptions__.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<double>("motion_model_alpha_1", "double", 1, "Rotation noise from rotation", "", &QuickMCLConfig::motion_model_alpha_1)));
//#line 26 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __min__.motion_model_alpha_2 = 0.0;
//#line 26 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __max__.motion_model_alpha_2 = std::numeric_limits<double>::infinity();
//#line 26 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __default__.motion_model_alpha_2 = 0.1;
//#line 26 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      motion_model.abstract_parameters.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<double>("motion_model_alpha_2", "double", 1, "Rotation noise from translation", "", &QuickMCLConfig::motion_model_alpha_2)));
//#line 26 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __param_descriptions__.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<double>("motion_model_alpha_2", "double", 1, "Rotation noise from translation", "", &QuickMCLConfig::motion_model_alpha_2)));
//#line 27 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __min__.motion_model_alpha_3 = 0.0;
//#line 27 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __max__.motion_model_alpha_3 = std::numeric_limits<double>::infinity();
//#line 27 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __default__.motion_model_alpha_3 = 0.02;
//#line 27 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      motion_model.abstract_parameters.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<double>("motion_model_alpha_3", "double", 1, "Translation noise from translation", "", &QuickMCLConfig::motion_model_alpha_3)));
//#line 27 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __param_descriptions__.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<double>("motion_model_alpha_3", "double", 1, "Translation noise from translation", "", &QuickMCLConfig::motion_model_alpha_3)));
//#line 28 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __min__.motion_model_alpha_4 = 0.0;
//#line 28 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __max__.motion_model_alpha_4 = std::numeric_limits<double>::infinity();
//#line 28 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __default__.motion_model_alpha_4 = 0.05;
//#line 28 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      motion_model.abstract_parameters.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<double>("motion_model_alpha_4", "double", 1, "Translation noise from rotation", "", &QuickMCLConfig::motion_model_alpha_4)));
//#line 28 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __param_descriptions__.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<double>("motion_model_alpha_4", "double", 1, "Translation noise from rotation", "", &QuickMCLConfig::motion_model_alpha_4)));
//#line 29 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __min__.motion_model_min_trans = 0.0;
//#line 29 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __max__.motion_model_min_trans = std::numeric_limits<double>::infinity();
//#line 29 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __default__.motion_model_min_trans = 0.2;
//#line 29 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      motion_model.abstract_parameters.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<double>("motion_model_min_trans", "double", 1, "Minimum translation for filter to update [m]", "", &QuickMCLConfig::motion_model_min_trans)));
//#line 29 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __param_descriptions__.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<double>("motion_model_min_trans", "double", 1, "Minimum translation for filter to update [m]", "", &QuickMCLConfig::motion_model_min_trans)));
//#line 30 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __min__.motion_model_min_rot = 0.0;
//#line 30 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __max__.motion_model_min_rot = 6.28318530718;
//#line 30 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __default__.motion_model_min_rot = 0.523598775598;
//#line 30 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      motion_model.abstract_parameters.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<double>("motion_model_min_rot", "double", 1, "Minimum rotation for filter to update [rad]", "", &QuickMCLConfig::motion_model_min_rot)));
//#line 30 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __param_descriptions__.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<double>("motion_model_min_rot", "double", 1, "Minimum rotation for filter to update [rad]", "", &QuickMCLConfig::motion_model_min_rot)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      motion_model.convertParams();
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(QuickMCLConfig::AbstractGroupDescriptionConstPtr(new QuickMCLConfig::GroupDescription<QuickMCLConfig::DEFAULT::MOTION_MODEL, QuickMCLConfig::DEFAULT>(motion_model)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(QuickMCLConfig::AbstractGroupDescriptionConstPtr(new QuickMCLConfig::GroupDescription<QuickMCLConfig::DEFAULT::MOTION_MODEL, QuickMCLConfig::DEFAULT>(motion_model)));
QuickMCLConfig::GroupDescription<QuickMCLConfig::DEFAULT::SENSOR_MODEL, QuickMCLConfig::DEFAULT> sensor_model("sensor_model", "", 0, 2, true, &QuickMCLConfig::DEFAULT::sensor_model);
//#line 35 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __min__.likelihood_z_hit = 0.0;
//#line 35 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __max__.likelihood_z_hit = 1.0;
//#line 35 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __default__.likelihood_z_hit = 0.9;
//#line 35 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      sensor_model.abstract_parameters.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<double>("likelihood_z_hit", "double", 2, "Probability weight to assign to 'hit when there is actually something there in the map'.", "", &QuickMCLConfig::likelihood_z_hit)));
//#line 35 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __param_descriptions__.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<double>("likelihood_z_hit", "double", 2, "Probability weight to assign to 'hit when there is actually something there in the map'.", "", &QuickMCLConfig::likelihood_z_hit)));
//#line 38 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __min__.likelihood_z_rand = 0.0;
//#line 38 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __max__.likelihood_z_rand = 1.0;
//#line 38 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __default__.likelihood_z_rand = 0.1;
//#line 38 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      sensor_model.abstract_parameters.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<double>("likelihood_z_rand", "double", 2, "Probability weight to assign to 'random hit even when there is nothing there in the map'.", "", &QuickMCLConfig::likelihood_z_rand)));
//#line 38 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __param_descriptions__.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<double>("likelihood_z_rand", "double", 2, "Probability weight to assign to 'random hit even when there is nothing there in the map'.", "", &QuickMCLConfig::likelihood_z_rand)));
//#line 49 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __min__.likelihood_num_beams = 0;
//#line 49 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __max__.likelihood_num_beams = 2147483647;
//#line 49 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __default__.likelihood_num_beams = 30;
//#line 49 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      sensor_model.abstract_parameters.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<int>("likelihood_num_beams", "int", 2, "Number of laser beams to use from the scan. This sub-sampling will be done via selecting evenly spaced beams. Set to 0 to use all (not recommended).", "", &QuickMCLConfig::likelihood_num_beams)));
//#line 49 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __param_descriptions__.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<int>("likelihood_num_beams", "int", 2, "Number of laser beams to use from the scan. This sub-sampling will be done via selecting evenly spaced beams. Set to 0 to use all (not recommended).", "", &QuickMCLConfig::likelihood_num_beams)));
//#line 52 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __min__.likelihood_max_laser_distance = 0.0;
//#line 52 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __max__.likelihood_max_laser_distance = std::numeric_limits<double>::infinity();
//#line 52 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __default__.likelihood_max_laser_distance = 14.0;
//#line 52 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      sensor_model.abstract_parameters.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<double>("likelihood_max_laser_distance", "double", 2, "Maximum laser distance [m]. Used to divide likelihood_z_rand to create proper probability distribution.", "", &QuickMCLConfig::likelihood_max_laser_distance)));
//#line 52 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __param_descriptions__.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<double>("likelihood_max_laser_distance", "double", 2, "Maximum laser distance [m]. Used to divide likelihood_z_rand to create proper probability distribution.", "", &QuickMCLConfig::likelihood_max_laser_distance)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      sensor_model.convertParams();
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(QuickMCLConfig::AbstractGroupDescriptionConstPtr(new QuickMCLConfig::GroupDescription<QuickMCLConfig::DEFAULT::SENSOR_MODEL, QuickMCLConfig::DEFAULT>(sensor_model)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(QuickMCLConfig::AbstractGroupDescriptionConstPtr(new QuickMCLConfig::GroupDescription<QuickMCLConfig::DEFAULT::SENSOR_MODEL, QuickMCLConfig::DEFAULT>(sensor_model)));
QuickMCLConfig::GroupDescription<QuickMCLConfig::DEFAULT::PARTICLE_FILTER, QuickMCLConfig::DEFAULT> particle_filter("particle_filter", "", 0, 3, true, &QuickMCLConfig::DEFAULT::particle_filter);
//#line 55 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __min__.particle_filter_particle_count_min = 10;
//#line 55 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __max__.particle_filter_particle_count_min = 2147483647;
//#line 55 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __default__.particle_filter_particle_count_min = 100;
//#line 55 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      particle_filter.abstract_parameters.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<int>("particle_filter_particle_count_min", "int", 4, "Number of particles (min)", "", &QuickMCLConfig::particle_filter_particle_count_min)));
//#line 55 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __param_descriptions__.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<int>("particle_filter_particle_count_min", "int", 4, "Number of particles (min)", "", &QuickMCLConfig::particle_filter_particle_count_min)));
//#line 56 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __min__.particle_filter_particle_count_max = 10;
//#line 56 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __max__.particle_filter_particle_count_max = 2147483647;
//#line 56 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __default__.particle_filter_particle_count_max = 5000;
//#line 56 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      particle_filter.abstract_parameters.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<int>("particle_filter_particle_count_max", "int", 4, "Number of particles (max)", "", &QuickMCLConfig::particle_filter_particle_count_max)));
//#line 56 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __param_descriptions__.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<int>("particle_filter_particle_count_max", "int", 4, "Number of particles (max)", "", &QuickMCLConfig::particle_filter_particle_count_max)));
//#line 57 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __min__.particle_filter_resample_count = 1;
//#line 57 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __max__.particle_filter_resample_count = 2147483647;
//#line 57 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __default__.particle_filter_resample_count = 2;
//#line 57 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      particle_filter.abstract_parameters.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<int>("particle_filter_resample_count", "int", 4, "How often (in filter updates) to resample.", "", &QuickMCLConfig::particle_filter_resample_count)));
//#line 57 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __param_descriptions__.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<int>("particle_filter_resample_count", "int", 4, "How often (in filter updates) to resample.", "", &QuickMCLConfig::particle_filter_resample_count)));
//#line 58 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __min__.particle_filter_alpha_fast = 0.0;
//#line 58 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __max__.particle_filter_alpha_fast = 1.0;
//#line 58 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __default__.particle_filter_alpha_fast = 0.1;
//#line 58 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      particle_filter.abstract_parameters.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<double>("particle_filter_alpha_fast", "double", 4, "Low pass constant for adaptive/kld.", "", &QuickMCLConfig::particle_filter_alpha_fast)));
//#line 58 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __param_descriptions__.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<double>("particle_filter_alpha_fast", "double", 4, "Low pass constant for adaptive/kld.", "", &QuickMCLConfig::particle_filter_alpha_fast)));
//#line 59 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __min__.particle_filter_alpha_slow = 0.0;
//#line 59 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __max__.particle_filter_alpha_slow = 1.0;
//#line 59 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __default__.particle_filter_alpha_slow = 0.001;
//#line 59 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      particle_filter.abstract_parameters.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<double>("particle_filter_alpha_slow", "double", 4, "Low pass constant for adaptive/kld.", "", &QuickMCLConfig::particle_filter_alpha_slow)));
//#line 59 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __param_descriptions__.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<double>("particle_filter_alpha_slow", "double", 4, "Low pass constant for adaptive/kld.", "", &QuickMCLConfig::particle_filter_alpha_slow)));
//#line 60 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __min__.particle_filter_kld_epsilon = 0.0;
//#line 60 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __max__.particle_filter_kld_epsilon = 1.0;
//#line 60 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __default__.particle_filter_kld_epsilon = 0.05;
//#line 60 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      particle_filter.abstract_parameters.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<double>("particle_filter_kld_epsilon", "double", 4, "KLD epsilon parameter", "", &QuickMCLConfig::particle_filter_kld_epsilon)));
//#line 60 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __param_descriptions__.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<double>("particle_filter_kld_epsilon", "double", 4, "KLD epsilon parameter", "", &QuickMCLConfig::particle_filter_kld_epsilon)));
//#line 61 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __min__.particle_filter_kld_z = 0.0;
//#line 61 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __max__.particle_filter_kld_z = 1.0;
//#line 61 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __default__.particle_filter_kld_z = 0.95;
//#line 61 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      particle_filter.abstract_parameters.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<double>("particle_filter_kld_z", "double", 4, "KLD z_(1-delta) parameter", "", &QuickMCLConfig::particle_filter_kld_z)));
//#line 61 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __param_descriptions__.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<double>("particle_filter_kld_z", "double", 4, "KLD z_(1-delta) parameter", "", &QuickMCLConfig::particle_filter_kld_z)));
//#line 62 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __min__.space_partitioning_resolution_xy = 0.0;
//#line 62 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __max__.space_partitioning_resolution_xy = 1.0;
//#line 62 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __default__.space_partitioning_resolution_xy = 0.5;
//#line 62 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      particle_filter.abstract_parameters.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<double>("space_partitioning_resolution_xy", "double", 4, "KLD bucket resolution x and y [m]", "", &QuickMCLConfig::space_partitioning_resolution_xy)));
//#line 62 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __param_descriptions__.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<double>("space_partitioning_resolution_xy", "double", 4, "KLD bucket resolution x and y [m]", "", &QuickMCLConfig::space_partitioning_resolution_xy)));
//#line 64 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __min__.space_partitioning_resolution_theta = 0.0;
//#line 64 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __max__.space_partitioning_resolution_theta = 6.28318530718;
//#line 64 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __default__.space_partitioning_resolution_theta = 0.174532925199;
//#line 64 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      particle_filter.abstract_parameters.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<double>("space_partitioning_resolution_theta", "double", 4, "KLD bucket resolution rotation [rad]", "", &QuickMCLConfig::space_partitioning_resolution_theta)));
//#line 64 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __param_descriptions__.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<double>("space_partitioning_resolution_theta", "double", 4, "KLD bucket resolution rotation [rad]", "", &QuickMCLConfig::space_partitioning_resolution_theta)));
//#line 65 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __min__.particle_filter_resample_type = "";
//#line 65 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __max__.particle_filter_resample_type = "";
//#line 65 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __default__.particle_filter_resample_type = "kld";
//#line 65 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      particle_filter.abstract_parameters.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<std::string>("particle_filter_resample_type", "str", 4, "Resample algorithm to use", "{'enum_description': 'Enum for resampling types', 'enum': [{'srcline': 18, 'description': 'Low variance sampling', 'srcfile': '/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg', 'cconsttype': 'const char * const', 'value': 'low_variance', 'ctype': 'std::string', 'type': 'str', 'name': 'low_variance'}, {'srcline': 19, 'description': 'Adaptive resampling', 'srcfile': '/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg', 'cconsttype': 'const char * const', 'value': 'adaptive', 'ctype': 'std::string', 'type': 'str', 'name': 'adaptive'}, {'srcline': 20, 'description': 'Adaptive KLD resampling', 'srcfile': '/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg', 'cconsttype': 'const char * const', 'value': 'kld', 'ctype': 'std::string', 'type': 'str', 'name': 'kld'}]}", &QuickMCLConfig::particle_filter_resample_type)));
//#line 65 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __param_descriptions__.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<std::string>("particle_filter_resample_type", "str", 4, "Resample algorithm to use", "{'enum_description': 'Enum for resampling types', 'enum': [{'srcline': 18, 'description': 'Low variance sampling', 'srcfile': '/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg', 'cconsttype': 'const char * const', 'value': 'low_variance', 'ctype': 'std::string', 'type': 'str', 'name': 'low_variance'}, {'srcline': 19, 'description': 'Adaptive resampling', 'srcfile': '/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg', 'cconsttype': 'const char * const', 'value': 'adaptive', 'ctype': 'std::string', 'type': 'str', 'name': 'adaptive'}, {'srcline': 20, 'description': 'Adaptive KLD resampling', 'srcfile': '/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg', 'cconsttype': 'const char * const', 'value': 'kld', 'ctype': 'std::string', 'type': 'str', 'name': 'kld'}]}", &QuickMCLConfig::particle_filter_resample_type)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      particle_filter.convertParams();
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(QuickMCLConfig::AbstractGroupDescriptionConstPtr(new QuickMCLConfig::GroupDescription<QuickMCLConfig::DEFAULT::PARTICLE_FILTER, QuickMCLConfig::DEFAULT>(particle_filter)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(QuickMCLConfig::AbstractGroupDescriptionConstPtr(new QuickMCLConfig::GroupDescription<QuickMCLConfig::DEFAULT::PARTICLE_FILTER, QuickMCLConfig::DEFAULT>(particle_filter)));
QuickMCLConfig::GroupDescription<QuickMCLConfig::DEFAULT::ROS, QuickMCLConfig::DEFAULT> ros("ros", "", 0, 4, true, &QuickMCLConfig::DEFAULT::ros);
//#line 68 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __min__.fixed_frame = "";
//#line 68 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __max__.fixed_frame = "";
//#line 68 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __default__.fixed_frame = "map";
//#line 68 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      ros.abstract_parameters.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<std::string>("fixed_frame", "str", 8, "TF frame to work in, map expected to be in this frame.", "", &QuickMCLConfig::fixed_frame)));
//#line 68 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __param_descriptions__.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<std::string>("fixed_frame", "str", 8, "TF frame to work in, map expected to be in this frame.", "", &QuickMCLConfig::fixed_frame)));
//#line 69 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __min__.localised_frame = "";
//#line 69 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __max__.localised_frame = "";
//#line 69 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __default__.localised_frame = "base_link";
//#line 69 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      ros.abstract_parameters.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<std::string>("localised_frame", "str", 8, "TF frame to localise.", "", &QuickMCLConfig::localised_frame)));
//#line 69 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __param_descriptions__.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<std::string>("localised_frame", "str", 8, "TF frame to localise.", "", &QuickMCLConfig::localised_frame)));
//#line 70 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __min__.odom_frame = "";
//#line 70 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __max__.odom_frame = "";
//#line 70 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __default__.odom_frame = "odom";
//#line 70 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      ros.abstract_parameters.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<std::string>("odom_frame", "str", 8, "TF frame to publish transform for (from fixed frame).", "", &QuickMCLConfig::odom_frame)));
//#line 70 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __param_descriptions__.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<std::string>("odom_frame", "str", 8, "TF frame to publish transform for (from fixed frame).", "", &QuickMCLConfig::odom_frame)));
//#line 75 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __min__.save_pose_period = 0.0;
//#line 75 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __max__.save_pose_period = std::numeric_limits<double>::infinity();
//#line 75 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __default__.save_pose_period = 0.0;
//#line 75 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      ros.abstract_parameters.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<double>("save_pose_period", "double", 8, "How often (in seconds) to save the pose to the parameter server. This will be reloaded on startup. Set to 0 to disable saving.", "", &QuickMCLConfig::save_pose_period)));
//#line 75 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __param_descriptions__.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<double>("save_pose_period", "double", 8, "How often (in seconds) to save the pose to the parameter server. This will be reloaded on startup. Set to 0 to disable saving.", "", &QuickMCLConfig::save_pose_period)));
//#line 79 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __min__.post_date_transform = 0.0;
//#line 79 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __max__.post_date_transform = std::numeric_limits<double>::infinity();
//#line 79 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __default__.post_date_transform = 0.1;
//#line 79 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      ros.abstract_parameters.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<double>("post_date_transform", "double", 8, "How much to post-date transform, should be similar to delta between scans. Helps rviz get less glitchy and in general indicates that this estimate is valid a bit into the future.", "", &QuickMCLConfig::post_date_transform)));
//#line 79 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __param_descriptions__.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<double>("post_date_transform", "double", 8, "How much to post-date transform, should be similar to delta between scans. Helps rviz get less glitchy and in general indicates that this estimate is valid a bit into the future.", "", &QuickMCLConfig::post_date_transform)));
//#line 82 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __min__.publish_particles = 0;
//#line 82 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __max__.publish_particles = 1;
//#line 82 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __default__.publish_particles = 0;
//#line 82 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      ros.abstract_parameters.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<bool>("publish_particles", "bool", 8, "If true, publish filter particles as markers.", "", &QuickMCLConfig::publish_particles)));
//#line 82 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      __param_descriptions__.push_back(QuickMCLConfig::AbstractParamDescriptionConstPtr(new QuickMCLConfig::ParamDescription<bool>("publish_particles", "bool", 8, "If true, publish filter particles as markers.", "", &QuickMCLConfig::publish_particles)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      ros.convertParams();
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.groups.push_back(QuickMCLConfig::AbstractGroupDescriptionConstPtr(new QuickMCLConfig::GroupDescription<QuickMCLConfig::DEFAULT::ROS, QuickMCLConfig::DEFAULT>(ros)));
//#line 124 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(QuickMCLConfig::AbstractGroupDescriptionConstPtr(new QuickMCLConfig::GroupDescription<QuickMCLConfig::DEFAULT::ROS, QuickMCLConfig::DEFAULT>(ros)));
//#line 246 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      Default.convertParams();
//#line 246 "/opt/ros/melodic/lib/python2.7/dist-packages/dynamic_reconfigure/parameter_generator_catkin.py"
      __group_descriptions__.push_back(QuickMCLConfig::AbstractGroupDescriptionConstPtr(new QuickMCLConfig::GroupDescription<QuickMCLConfig::DEFAULT, QuickMCLConfig>(Default)));
//#line 366 "/opt/ros/melodic/share/dynamic_reconfigure/cmake/../templates/ConfigType.h.template"

      for (std::vector<QuickMCLConfig::AbstractGroupDescriptionConstPtr>::const_iterator i = __group_descriptions__.begin(); i != __group_descriptions__.end(); ++i)
      {
        __description_message__.groups.push_back(**i);
      }
      __max__.__toMessage__(__description_message__.max, __param_descriptions__, __group_descriptions__);
      __min__.__toMessage__(__description_message__.min, __param_descriptions__, __group_descriptions__);
      __default__.__toMessage__(__description_message__.dflt, __param_descriptions__, __group_descriptions__);
    }
    std::vector<QuickMCLConfig::AbstractParamDescriptionConstPtr> __param_descriptions__;
    std::vector<QuickMCLConfig::AbstractGroupDescriptionConstPtr> __group_descriptions__;
    QuickMCLConfig __max__;
    QuickMCLConfig __min__;
    QuickMCLConfig __default__;
    dynamic_reconfigure::ConfigDescription __description_message__;

    static const QuickMCLConfigStatics *get_instance()
    {
      // Split this off in a separate function because I know that
      // instance will get initialized the first time get_instance is
      // called, and I am guaranteeing that get_instance gets called at
      // most once.
      static QuickMCLConfigStatics instance;
      return &instance;
    }
  };

  inline const dynamic_reconfigure::ConfigDescription &QuickMCLConfig::__getDescriptionMessage__()
  {
    return __get_statics__()->__description_message__;
  }

  inline const QuickMCLConfig &QuickMCLConfig::__getDefault__()
  {
    return __get_statics__()->__default__;
  }

  inline const QuickMCLConfig &QuickMCLConfig::__getMax__()
  {
    return __get_statics__()->__max__;
  }

  inline const QuickMCLConfig &QuickMCLConfig::__getMin__()
  {
    return __get_statics__()->__min__;
  }

  inline const std::vector<QuickMCLConfig::AbstractParamDescriptionConstPtr> &QuickMCLConfig::__getParamDescriptions__()
  {
    return __get_statics__()->__param_descriptions__;
  }

  inline const std::vector<QuickMCLConfig::AbstractGroupDescriptionConstPtr> &QuickMCLConfig::__getGroupDescriptions__()
  {
    return __get_statics__()->__group_descriptions__;
  }

  inline const QuickMCLConfigStatics *QuickMCLConfig::__get_statics__()
  {
    const static QuickMCLConfigStatics *statics;

    if (statics) // Common case
      return statics;

    boost::mutex::scoped_lock lock(dynamic_reconfigure::__init_mutex__);

    if (statics) // In case we lost a race.
      return statics;

    statics = QuickMCLConfigStatics::get_instance();

    return statics;
  }

//#line 12 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      const int QuickMCL_LEVEL_MOTION_MODEL = 1;
//#line 13 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      const int QuickMCL_LEVEL_SENSOR_MODEL = 2;
//#line 14 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      const int QuickMCL_LEVEL_PARTICLE_FILTER = 4;
//#line 15 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      const int QuickMCL_LEVEL_ROS = 8;
//#line 18 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      const char * const QuickMCL_low_variance = "low_variance";
//#line 19 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      const char * const QuickMCL_adaptive = "adaptive";
//#line 20 "/home/auv01/catkin_ws/src/quickmcl/cfg/QuickMCL.cfg"
      const char * const QuickMCL_kld = "kld";
}

#undef DYNAMIC_RECONFIGURE_FINAL

#endif // __QUICKMCLRECONFIGURATOR_H__
